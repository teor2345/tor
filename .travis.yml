language: c

cache:
  ccache: true
  ## cargo: true
  directories:
    - $HOME/.cargo
    ## where we point CARGO_TARGET_DIR in all our cargo invocations
    - $TRAVIS_BUILD_DIR/src/rust/target

compiler:
  - gcc
  - clang

os:
  - linux
  - osx

## The build matrix in the following stanza expands into builds for each
## OS and compiler.
env:
  global:
    ## The Travis CI environment allows us two cores, so let's use both.
    - MAKEFLAGS="-j 2"
    ## We turn on hardening by default
    - HARDENING_OPTIONS="--enable-fragile-hardening"
  matrix:
    ## We want to use each build option at least once
    ##
    ## We don't list default variable values, because we set the defaults
    ## in global (or the default is unset)
    -
    ## We turn off hardening for Rust builds, because they are incompatible,
    ## and it's going to take a while for them to be fixed. See:
    ##   https:/trac.torproject.org/projects/tor/ticket/25386
    ##   https:/trac.torproject.org/projects/tor/ticket/26398
    - RUST_OPTIONS="--enable-rust --enable-cargo-online-mode" HARDENING_OPTIONS=""

matrix:
  ## include creates builds with gcc, linux, sudo: false
  include:
    ## We include a single coverage build with the best options for coverage
    - env: COVERAGE_OPTIONS="--enable-coverage" HARDENING_OPTIONS=""
    ## We only want to check these build option combinations once
    ## (they shouldn't vary by compiler or OS)
    - env: HARDENING_OPTIONS=""
    - env: DISTCHECK="yes"
    - env: MODULES_OPTIONS="--disable-module-dirauth"
    - env: RUST_OPTIONS="--enable-rust" TOR_RUST_DEPENDENCIES=true HARDENING_OPTIONS=""
    - env: DISTCHECK="yes" RUST_OPTIONS="--enable-rust --enable-cargo-online-mode" HARDENING_OPTIONS=""
    - env: MODULES_OPTIONS="--disable-module-dirauth" RUST_OPTIONS="--enable-rust --enable-cargo-online-mode" HARDENING_OPTIONS=""

  ## Uncomment to allow the build to report success (with non-required
  ## sub-builds continuing to run) if all required sub-builds have
  ## succeeded.  This is somewhat buggy currently: it can cause
  ## duplicate notifications and prematurely report success if a
  ## single sub-build has succeeded.  See
  ## https://github.com/travis-ci/travis-ci/issues/1696
  # fast_finish: true

  ## Careful! We use global envs, which makes it hard to exclude or
  ## allow failures by env:
  ## https://docs.travis-ci.com/user/customizing-the-build#matching-jobs-with-allow_failures
  exclude:
    ## Clang doesn't work in containerized builds, see below.
    - compiler: clang
      sudo: false
    ## We also exclude non-containerized gcc, because they're slow and redundant.
    - compiler: gcc
      sudo: required

## We don't need sudo. (The "apt:" stanza after this allows us to not need
## sudo; otherwise, we would need it for getting dependencies.)
##
## But we use "sudo: required" to force non-containerized builds, working
## around a Travis CI environment issue: clang LeakAnalyzer fails
## because it requires ptrace and the containerized environment no
## longer allows ptrace.
## https://github.com/travis-ci/travis-ci/issues/9033
##
## In the matrix above, we exclude redundant combinations.
sudo:
  - false
  - required

before_install:
  ## If we're on OSX, homebrew usually needs to updated first
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew update ; fi
  ## Download rustup
  - if [[ "$RUST_OPTIONS" != "" ]]; then curl -Ssf -o rustup.sh https://sh.rustup.rs; fi
  ## Create empty rust directories for non-Rust builds, so caching succeeds
  - if [[ "$RUST_OPTIONS" == "" ]]; then mkdir -p $HOME/.cargo $TRAVIS_BUILD_DIR/target; fi
  ## Install coveralls
  - if [[ "$COVERAGE_OPTIONS" != "" ]]; then pip install --user cpp-coveralls; fi

## (Linux only) Use the latest Linux image (Ubuntu Trusty)
dist: trusty

## (Linux only) Download our dependencies
addons:
  apt:
    packages:
      ## Required dependencies
      - libevent-dev
      - zlib1g-dev
      ## Optional dependencies
      - libcap-dev
      - liblzma-dev
      - libscrypt-dev
      - libseccomp-dev
      ## zstd doesn't exist in Ubuntu Trusty
      #- libzstd

## (OSX only) Use the default OS X image
## See https://docs.travis-ci.com/user/reference/osx#os-x-version
#osx_image: xcode8.3

install:
  ## If we're on OSX use brew to install ccache (ccache is automatically installed on Linux)
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated ccache     || brew upgrade ccache;     }; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { export PATH="/usr/local/opt/ccache/libexec:$PATH";   }; fi
  ## If we're on OSX use brew to install required dependencies (for Linux, see the "apt:" section above)
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated zlib       || brew upgrade zlib;       }; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated openssl    || brew upgrade openssl;    }; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated libevent   || brew upgrade libevent;   }; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated pkg-config || brew upgrade pkg-config; }; fi
  ## If we're on OSX also install the optional dependencies
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated xz         || brew upgrade xz;         }; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated libscrypt  || brew upgrade libscrypt;  }; fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then { brew outdated zstd       || brew upgrade zstd;       }; fi
  ## Install the stable channels of rustc and cargo and setup our toolchain environment
  - if [[ "$RUST_OPTIONS" != "" ]]; then sh rustup.sh -y --default-toolchain stable; fi
  - if [[ "$RUST_OPTIONS" != "" ]]; then source $HOME/.cargo/env; fi
  ## Get some info about rustc and cargo
  - if [[ "$RUST_OPTIONS" != "" ]]; then which rustup; fi
  - if [[ "$RUST_OPTIONS" != "" ]]; then which rustc; fi
  - if [[ "$RUST_OPTIONS" != "" ]]; then which cargo; fi
  - if [[ "$RUST_OPTIONS" != "" ]]; then rustup --version; fi
  - if [[ "$RUST_OPTIONS" != "" ]]; then rustc --version; fi
  - if [[ "$RUST_OPTIONS" != "" ]]; then cargo --version; fi
  ## If we're testing rust builds in offline-mode, then set up our vendored dependencies
  - if [[ "$TOR_RUST_DEPENDENCIES" == "true" ]]; then export TOR_RUST_DEPENDENCIES=$PWD/src/ext/rust/crates; fi

script:
  - ./autogen.sh
  - ./configure $RUST_OPTIONS $COVERAGE_OPTIONS $MODULES_OPTIONS --disable-asciidoc --enable-fatal-warnings --disable-silent-rules $HARDENING_OPTIONS
  ## We run `make check` because that's what https://jenkins.torproject.org does.
  - if [[ "$DISTCHECK" == "" ]]; then make check; fi
  - if [[ "$DISTCHECK" != "" ]]; then make distcheck DISTCHECK_CONFIGURE_FLAGS="$RUST_OPTIONS $COVERAGE_OPTIONS --disable-asciidoc --enable-fatal-warnings --disable-silent-rules $HARDENING_OPTIONS"; fi

after_failure:
  ## configure will leave a log file with more details of config failures.
  - cat config.log
  ## `make check` will leave a log file with more details of test failures.
  - if [[ "$DISTCHECK" == "" ]]; then cat test-suite.log; fi
  ## `make distcheck` puts it somewhere different.
  - if [[ "$DISTCHECK" != "" ]]; then make show-distdir-testlog; fi

after_success:
  ## If this build was one that produced coverage, upload it.
  - if [[ "$COVERAGE_OPTIONS" != "" ]]; then coveralls -b . --exclude src/test --exclude src/trunnel --gcov-options '\-p'; fi

notifications:
  irc:
    channels:
      - "irc.oftc.net#tor-ci"
    template:
      - "%{repository} %{branch} %{commit} - %{author}: %{commit_subject}"
      - "Build #%{build_number} %{result}. Details: %{build_url}"
    on_success: change
    on_failure: change
  email:
    on_success: never
    on_failure: change
